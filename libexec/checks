#!/usr/bin/env bash

set -o errexit -o pipefail

# Using bash to check the bash version isn't fool proof. If invoked by an old enough
# bash version the program will presumably error out before this block gets invoked
check::bash_version() {
    local regex="^([0-9]+)(.)([0-9]+)"

    if [[ ! "${BASH_VERSION:?}" =~ $regex ]]; then
	log::fatal "Unable to determine Bash version."
    fi

    declare -a version
    set -- "${BASH_REMATCH[@]}"
    while [[ $# -gt 0 ]]; do
	if [[ "$1" == *"."* ]]; then
	    shift
	    continue
	fi
	version+=("$1")
	shift
    done

    log::debug "Bash version: $BASH_VERSION"
    if [[ ${version[0]} -le 4 ]] && [[ ${version[1]} -le 1 ]]; then
	log::fatal "Bash version '${BASH_VERSION}' is not supported. Must be >= 4.2.0"
    fi
}

check::dependencies() {
    declare -a deps=(
	git
    )

    for d in "${deps[@]}"; do
	log::info "Checking for '$d'"
	command -v "$d" || log::fatal "Command '$d' not found"
    done
}

main() {
    init

    #@ -h,--help | print this text
    #@ checks | validate essential dependencies are present

    check::bash_version
    check::dependencies
}

main "$@"
