#!/usr/bin/env bash

# Be mindful. Anything sandwiched between the two "set" lines will be exported
set -o errexit -o pipefail -o allexport
RAFI_ID="rafi"
RAFI_HOME_DIR="$(dirname "$(readlink -f "$0")")" # Libraries have yet to be loaded to we must fallback to external commands

RAFI_HOME_LIB_DIR="${RAFI_HOME_DIR}/lib"
RAFI_HOME_LIBEXEC_DIR="${RAFI_HOME_DIR}/libexec"
RAFI_HOME_PKGS_DIR="${RAFI_HOME_DIR}/pkgs"

RAFI_USR_CONFIG_DIR="${XDG_CONFIG_HOME:-${HOME:?}/.config}/${RAFI_ID}"
RAFI_USR_STATE_DIR="${XDG_STATE_HOME:-${HOME:?}/.local/state}/${RAFI_ID}"
RAFI_USR_DATA_DIR="${XDG_DATA_HOME:-${HOME:?}/.local/share}/${RAFI_ID}"

RAFI_INDEX_DIR="${RAFI_USR_STATE_DIR}"
RAFI_INDEX_INSTALLED_DIR="${RAFI_USR_STATE_DIR}/installed"
RAFI_INDEX_EQUIPPED_DIR="${RAFI_USR_STATE_DIR}/equipped"

RAFI_ROOTFS_DIR="${RAFI_USR_DATA_DIR}/rootfs"
RAFI_ROOTFS_BIN_DIR="${RAFI_ROOTFS_DIR}/bin"
RAFI_ROOTFS_ETC_DIR="${RAFI_ROOTFS_DIR}/etc"
RAFI_ROOTFS_USR_DIR="${RAFI_ROOTFS_DIR}/usr"
RAFI_ROOTFS_VAR_DIR="${RAFI_ROOTFS_DIR}/var"
RAFI_ROOTFS_LIB_DIR="${RAFI_ROOTFS_DIR}/lib"
RAFI_ROOTFS_LIB64_DIR="${RAFI_ROOTFS_DIR}/lib64"

RAFI_CONF_MULTILIB_SUPPORT=${RAFI_CONF_MULTILIB_SUPPORT:-1}

DEBUG=${DEBUG:-0}
DRYRUN=${DRYRUN:-0}
CLEAN=${CLEAN:-1}
set +o allexport

ARGV=()

usage::print() {
    # Usage: usage::print file
    log::debug "Reading $1"

    declare -a cmd
    cmd=("${0##*/}")
    if [[ "$0" != "$1" ]]; then
	cmd+=("${1##*/}")
    fi

    printf '%s: %s\n' "Version" "$(<"${RAFI_HOME_DIR}/VERSION")" 
    
    printf '\n%s:\n' "Environment"
    printf '%s 0/1\n  %s\n' "DEBUG" "Print debug logs. Default is 0" "DRYRUN" "Do not execute commands only print them. Default is 0"
    
    printf '\n%s: %s\n' "Usage" "${cmd[*]}"
    while read -r line; do
	tmp="$(string::trim "$line")"
	if [[ "$tmp" == "#@"* ]]; then
	    declare -a wrkarr
	    tmp="${tmp###@ }"

	    IFS= wrkarr=($(string::split "${tmp###@ }" "|"))

	    printf '%s\n' "${wrkarr[0]}"     # argument
	    printf '  %s\n' "${wrkarr[*]:1}" # description
	fi
    done < "$1"
}

self::install() {
    # Usage: self::install

    local bin_dir="${DESTDIR-${HOME}/.local}/bin"

    ln -srf "${0##*/}" "${bin_dir}/${RAFI_ID}"
    printf '%s\n' "Installed executable to ${bin_dir}/${RAFI_ID}"

    mkdir -p "$RAFI_USR_CONFIG_DIR" \
             "$RAFI_USR_STATE_DIR" \
             "$RAFI_USR_DATA_DIR" \
	     "$RAFI_INDEX_DIR" \
	     "$RAFI_INDEX_INSTALLED_DIR" \
	     "$RAFI_INDEX_EQUIPPED_DIR" \
             "$RAFI_ROOTFS_DIR" \
             "$RAFI_ROOTFS_BIN_DIR" \
             "$RAFI_ROOTFS_ETC_DIR" \
	     "$RAFI_ROOTFS_VAR_DIR" \
             "$RAFI_ROOTFS_USR_DIR" \
	     "${RAFI_ROOTFS_USR_DIR}/lib" \
	     "${RAFI_ROOTFS_USR_DIR}/lib64" \
             "$RAFI_ROOTFS_LIB_DIR" \
             "$RAFI_ROOTFS_LIB64_DIR"
}

self::configure_bash() {
    # Usage: self::configure_bash
    if [[ "$PATH" == *"${RAFI_ROOTFS_BIN_DIR}"* ]]; then
	return 0
    fi

    printf '%s\n' "source <(printf '%s\n' PATH=\"${RAFI_ROOTFS_BIN_DIR}:\$PATH\")"
}

arg::parse() {
    # Usage:: arg::parse
    declare -a targets

    local found_subcommand=0
    while [[ $# -gt 0 ]]; do
        local argv="$1"

        case "$argv" in
	    #@ -h,--help | Print this text
	    -h|--help)
		local usage_source_file
		usage_source_file="${RAFI_HOME_LIBEXEC}/${targets[0]}"
		if [[ -z "${targets[0]}" ]]; then
		    usage_source_file="$0"
		fi
		
		usage::print "$usage_source_file"
		exit 0
		;;
	    [[:alpha:]]*)
		found_subcommand=1
		targets+=("$argv")
		shift
		;;
            -*)
		if [[ $found_subcommand -eq 1 ]]; then
		    targets+=("$argv")
		    shift
		    continue
		fi

		log::_fatal 128 "Invalid option: $argv" >&2
                ;;
            *)
                targets+=("$argv")
                shift
                ;;
        esac

        regex_requires_no_arg="^--with(out)?-[A-Za-z-]+"
        if [[ "$argv" =~ $regex_requires_no_arg ]]; then
            shift
        elif [[ "$argv" == "--"* ]]; then
            shift 2
        fi
    done

    ARGV=("${targets[@]}")
}

bootstrap() {
    # This is written in such a way for the sake of performance. It's not pretty to look at. Func 'bootstrap'
    # is the first thing called in 'main'. These subcommands will get called often so it's important we do as
    # little before hand (i.e, no directory traversal, sourcing files), otherwise we'll contribute to slowdown
    # when executed inside a .rc file.

    if [[ "$1" != "bootstrap" ]] && [[ "$1" != "init" ]]; then
	init
	return 0
    fi

    case "$2" in
	#@ bootstrap install | Install self
	install)
	    self::install
	    ;;
	#@ init bash | Print lines that are to be added to your bashrc
	bash)
	    self::configure_bash
	    ;;
	*)
	    exit 128
	    ;;
    esac

    exit 0
}

init() {
    # Usage: init
    for f in "${RAFI_HOME_LIB_DIR}/"*.sh; do
	if [[ $DEBUG -eq 1 ]]; then
	    printf '%s\n' "Loading library: $f"
	fi
	source "$f"
    done
}

main() {
    bootstrap "$@"

    # arg::parse sets global variable ARGV
    arg::parse "$@"
    
    # Builtins
    case "${ARGV[0]}" in
	#@ help | Print this text
	''|h|help)
	    usage::print "$0"
	    exit 0
	    ;;
    esac

    export -f init

    local subcommand="${RAFI_HOME_LIBEXEC_DIR}/${ARGV[0]}"
    if [[ -n "${ARGV[0]}" ]]; then
	if [[ -x "$subcommand" ]]; then	    
	    log::debug "Executing command '$subcommand' with arguments: ${argv[*]:1}"
	    exec "$subcommand" "${ARGV[@]:1}"
	elif [[ ! -e "$subcommand" ]]; then
	    log::fatal "Command '$subcommand' does not exist."
	else
	    log::fatal "Command '$subcommand' is not executable."
	fi
    fi

    log::_fatal 128 "Invalid argument: '${ARGV[0]}'." >&2
}

main "$@"
